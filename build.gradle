plugins {
    id 'maven-publish'
    alias libs.plugins.minotaur
    alias libs.plugins.quilt.loom
}

repositories {
    // EMI
    maven {
        name = "TerraformersMC"
        url = "https://maven.terraformersmc.com/"
    }
    // REI
    maven {
        name = "SheDaniel"
        url = "https://maven.shedaniel.me"
    }
    // JEI
    maven {
        // location of the maven that hosts JEI files since January 2023
        name = "Jared's maven"
        url = "https://maven.blamejared.com/"
    }
}

dependencies {
    minecraft libs.minecraft
    mappings loom.layered {
        mappings "org.quiltmc:quilt-mappings:${libs.versions.quilt.mappings.get()}:intermediary-v2"
        officialMojangMappings()
    }
    modImplementation libs.quilt.loader

    modImplementation libs.quilted.fabric.api

    recipeViewer(dependencies)
}

def recipeViewer(DependencyHandler deps) {
    // stolen from create fabric

    // emi
    deps.modCompileOnly "dev.emi:emi-fabric:${libs.versions.emi.get()}:api"

    // rei
    deps.modCompileOnly "me.shedaniel:RoughlyEnoughItems-api-fabric:${libs.versions.rei.get()}"
    deps.modCompileOnly "me.shedaniel:RoughlyEnoughItems-default-plugin-fabric:${libs.versions.rei.get()}"
    // jei
    deps.modCompileOnly "mezz.jei:jei-${libs.versions.minecraft.get()}-common-api:${libs.versions.jei.get()}"
    deps.modCompileOnly "mezz.jei:jei-${libs.versions.minecraft.get()}-fabric-api:${libs.versions.jei.get()}"

    switch (recipe_viewer.toLowerCase(Locale.ROOT)) {
        case "emi": deps.modLocalRuntime libs.emi.runtime; break
        case "rei": deps.modLocalRuntime libs.rei.runtime; break
        case "jei": deps.modLocalRuntime "mezz.jei:jei-${libs.versions.minecraft.get()}-fabric:${libs.versions.jei.get()}"; break
        case "disabled": break
        default: println("Unknown recipe viewer specified: $recipe_viewer. Must be JEI, REI, EMI, or disabled.")
    }
}

// Build
base.archivesName = project.archives_base_name
version = "$project.version+${libs.versions.minecraft.get()}"
group = project.maven_group

processResources {
    inputs.property 'version', version

    filesMatching('quilt.mod.json') {
        expand 'version': version
    }
}

tasks.withType(JavaCompile).configureEach {
    it.options.encoding = 'UTF-8'
    it.options.release = 17
}

java {
    // Still required by IDEs such as Eclipse and Visual Studio Code
    sourceCompatibility = JavaVersion.VERSION_17
    targetCompatibility = JavaVersion.VERSION_17

    withSourcesJar()
    withJavadocJar()
}

// If you plan to use a different file for the license, don't forget to change the file name here!
jar {
    from('LICENSE') {
        rename { "${it}_${base.archivesName.get()}" }
    }
}

// api
tasks.register('apiJar', Jar) {
    archiveClassifier = "api"
    dependsOn remapJar
    from zipTree(remapJar.archivePath)
    include 'quilt.mod.json'
    include 'immersivecrafting.mixins.json'
    include 'com/carlschierig/immersivecrafting/api/**'
}

build.dependsOn apiJar

// Example mod
sourceSets {
    example {
        compileClasspath += sourceSets.main.compileClasspath
        compileClasspath += sourceSets.main.output
        runtimeClasspath += sourceSets.main.runtimeClasspath

        resources {
            srcDirs += ['src/example/generated']
            exclude "src/generated/resources/.cache"
        }
    }
    main {
        resources {
            srcDirs += ['src/main/generated']
            exclude "src/main/resources/.cache"
        }
    }
}

loom {
    runs {
        example {
            client()
            configName = "Example Mod"
            source(project.sourceSets.example)
        }
        exampleDatagen {
            inherit example
            name "Example Mod Data Generation"
            vmArg "-Dfabric-api.datagen"
            vmArg "-Dfabric-api.datagen.output-dir=${file("src/example/generated")}"
            vmArg "-Dfabric-api.datagen=ic_examples"

            runDir "build/exampleDatagen"
        }
        datagen {
            inherit client
            name "Data Generation"
            vmArg "-Dfabric-api.datagen"
            vmArg "-Dfabric-api.datagen.output-dir=${file("src/main/generated")}"
            vmArg "-Dfabric-api.datagen=ic_examples"

            runDir "build/datagen"
        }
    }
}

// publishing
publishing {
    publications {
        mavenJava(MavenPublication) {
            artifact(remapJar) {
                builtBy remapJar
                classifier ''
            }
            artifact(sourcesJar) {
                builtBy remapSourcesJar
                classifier 'sources'
            }
            artifact(apiJar) {
                builtBy apiJar
                classifier 'api'
            }
        }
    }
}

if (System.getenv("MODRINTH_TOKEN")) {
    modrinth {
        token = System.getenv("MODRINTH_TOKEN")
        projectId = "immersive-crafting"
        versionType = "alpha"
        uploadFile = remapJar
        additionalFiles = [
                remapSourcesJar,
                apiJar
        ]
        syncBodyFrom = rootProject.file("README.md").text
        dependencies {
            required.project "qsl"
            optional.project "emi"
            optional.project "rei"
        }
    }
    tasks.modrinth.dependsOn(tasks.modrinthSyncBody)
}
